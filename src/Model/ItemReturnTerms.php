<?php
/**
 * ItemReturnTerms
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  macropage\SDKs\ebay\rest\browse
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Browse API
 *
 * <p>The Browse API has the following resources:</p>   <ul> <li><b> item_summary: </b> Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values.</li>  <li><b> search_by_image: </b><a href=\"https://developer.ebay.com/api-docs/static/versioning.html#experimental\" target=\"_blank\"><img src=\"/cms/img/docs/experimental-icon.svg\" class=\"legend-icon experimental-icon\" alt=\"Experimental Release\" title=\"Experimental Release\" />&nbsp;(Experimental)</a> Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters.</li>   <li><b> item: </b> <ul><li>Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part.</li> <li>Provides a bridge between the eBay legacy APIs, such as <b> Finding</b>, and the RESTful APIs, which use different formats for the item IDs.</li>  </ul> </li>  <li> <b> shopping_cart: </b> <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#experimental\" target=\"_blank\"><img src=\"/cms/img/docs/experimental-icon.svg\" class=\"legend-icon experimental-icon\" alt=\"Experimental Release\" title=\"Experimental Release\" />&nbsp;(Experimental)</a> <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited\" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp;<b> Note: </b> This resource is not available in the eBay API Explorer.</li></ul>       <p>The <b> item_summary</b>, <b> search_by_image</b>, and <b> item</b> resource calls require an <a href=\"/api-docs/static/oauth-client-credentials-grant.html\">Application access token</a>. The <b> shopping_cart</b> resource calls require a <a href=\"/api-docs/static/oauth-authorization-code-grant.html\">User access token</a>.</p>
 *
 * The version of the OpenAPI document: v1.11.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace macropage\SDKs\ebay\rest\browse\Model;

use \ArrayAccess;
use \macropage\SDKs\ebay\rest\browse\ObjectSerializer;

/**
 * ItemReturnTerms Class Doc Comment
 *
 * @category Class
 * @description The type that defines the fields for the seller&#39;s return policy.
 * @package  macropage\SDKs\ebay\rest\browse
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ItemReturnTerms implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ItemReturnTerms';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'extendedHolidayReturnsOffered' => 'bool',
        'refundMethod' => 'string',
        'restockingFeePercentage' => 'string',
        'returnInstructions' => 'string',
        'returnMethod' => 'string',
        'returnPeriod' => '\macropage\SDKs\ebay\rest\browse\Model\TimeDuration',
        'returnsAccepted' => 'bool',
        'returnShippingCostPayer' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'extendedHolidayReturnsOffered' => null,
        'refundMethod' => null,
        'restockingFeePercentage' => null,
        'returnInstructions' => null,
        'returnMethod' => null,
        'returnPeriod' => null,
        'returnsAccepted' => null,
        'returnShippingCostPayer' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'extendedHolidayReturnsOffered' => 'extendedHolidayReturnsOffered',
        'refundMethod' => 'refundMethod',
        'restockingFeePercentage' => 'restockingFeePercentage',
        'returnInstructions' => 'returnInstructions',
        'returnMethod' => 'returnMethod',
        'returnPeriod' => 'returnPeriod',
        'returnsAccepted' => 'returnsAccepted',
        'returnShippingCostPayer' => 'returnShippingCostPayer'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'extendedHolidayReturnsOffered' => 'setExtendedHolidayReturnsOffered',
        'refundMethod' => 'setRefundMethod',
        'restockingFeePercentage' => 'setRestockingFeePercentage',
        'returnInstructions' => 'setReturnInstructions',
        'returnMethod' => 'setReturnMethod',
        'returnPeriod' => 'setReturnPeriod',
        'returnsAccepted' => 'setReturnsAccepted',
        'returnShippingCostPayer' => 'setReturnShippingCostPayer'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'extendedHolidayReturnsOffered' => 'getExtendedHolidayReturnsOffered',
        'refundMethod' => 'getRefundMethod',
        'restockingFeePercentage' => 'getRestockingFeePercentage',
        'returnInstructions' => 'getReturnInstructions',
        'returnMethod' => 'getReturnMethod',
        'returnPeriod' => 'getReturnPeriod',
        'returnsAccepted' => 'getReturnsAccepted',
        'returnShippingCostPayer' => 'getReturnShippingCostPayer'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['extendedHolidayReturnsOffered'] = $data['extendedHolidayReturnsOffered'] ?? null;
        $this->container['refundMethod'] = $data['refundMethod'] ?? null;
        $this->container['restockingFeePercentage'] = $data['restockingFeePercentage'] ?? null;
        $this->container['returnInstructions'] = $data['returnInstructions'] ?? null;
        $this->container['returnMethod'] = $data['returnMethod'] ?? null;
        $this->container['returnPeriod'] = $data['returnPeriod'] ?? null;
        $this->container['returnsAccepted'] = $data['returnsAccepted'] ?? null;
        $this->container['returnShippingCostPayer'] = $data['returnShippingCostPayer'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets extendedHolidayReturnsOffered
     *
     * @return bool|null
     */
    public function getExtendedHolidayReturnsOffered()
    {
        return $this->container['extendedHolidayReturnsOffered'];
    }

    /**
     * Sets extendedHolidayReturnsOffered
     *
     * @param bool|null $extendedHolidayReturnsOffered This indicates if the seller has enabled the Extended Holiday Returns feature on the item. Extended Holiday Returns are only applicable during the US holiday season, and gives buyers extra time to return an item. This 'extra time' will typically extend beyond what is set through the <b> returnPeriod</b> value.
     *
     * @return self
     */
    public function setExtendedHolidayReturnsOffered($extendedHolidayReturnsOffered)
    {
        $this->container['extendedHolidayReturnsOffered'] = $extendedHolidayReturnsOffered;

        return $this;
    }

    /**
     * Gets refundMethod
     *
     * @return string|null
     */
    public function getRefundMethod()
    {
        return $this->container['refundMethod'];
    }

    /**
     * Sets refundMethod
     *
     * @param string|null $refundMethod An enumeration value that indicates how a buyer is refunded when an item is returned. <br><br><b> Valid Values: </b> MONEY_BACK or MERCHANDISE_CREDIT  <br /><br />Code so that your app gracefully handles any future changes to this list. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:RefundMethodEnum'>eBay API documentation</a>
     *
     * @return self
     */
    public function setRefundMethod($refundMethod)
    {
        $this->container['refundMethod'] = $refundMethod;

        return $this;
    }

    /**
     * Gets restockingFeePercentage
     *
     * @return string|null
     */
    public function getRestockingFeePercentage()
    {
        return $this->container['restockingFeePercentage'];
    }

    /**
     * Sets restockingFeePercentage
     *
     * @param string|null $restockingFeePercentage This string field indicates the restocking fee percentage that the seller has set on the item. Sellers have the option of setting no restocking fee for an item, or they can set the percentage to 10, 15, or 20 percent. So, if the cost of the item was $100, and the restocking percentage was 20 percent, the buyer would be charged $20 to return that item, so instead of receiving a $100 refund, they would receive $80 due to the restocking fee.
     *
     * @return self
     */
    public function setRestockingFeePercentage($restockingFeePercentage)
    {
        $this->container['restockingFeePercentage'] = $restockingFeePercentage;

        return $this;
    }

    /**
     * Gets returnInstructions
     *
     * @return string|null
     */
    public function getReturnInstructions()
    {
        return $this->container['returnInstructions'];
    }

    /**
     * Sets returnInstructions
     *
     * @param string|null $returnInstructions Text written by the seller describing what the buyer needs to do in order to return the item.
     *
     * @return self
     */
    public function setReturnInstructions($returnInstructions)
    {
        $this->container['returnInstructions'] = $returnInstructions;

        return $this;
    }

    /**
     * Gets returnMethod
     *
     * @return string|null
     */
    public function getReturnMethod()
    {
        return $this->container['returnMethod'];
    }

    /**
     * Sets returnMethod
     *
     * @param string|null $returnMethod An enumeration value that indicates the alternative methods for a full refund when an item is returned. This field is returned if the seller offers the buyer an item replacement or exchange instead of a monetary refund. <br><br><b> Valid Values: </b>  <ul><li><b> REPLACEMENT</b> -  Indicates that the buyer has the option of receiving money back for the returned item, or they can choose to have the seller replace the item with an identical item.</li>  <li><b> EXCHANGE</b> - Indicates that the buyer has the option of receiving money back for the returned item, or they can exchange the item for another similar item.</li></ul>  Code so that your app gracefully handles any future changes to this list. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:ReturnMethodEnum'>eBay API documentation</a>
     *
     * @return self
     */
    public function setReturnMethod($returnMethod)
    {
        $this->container['returnMethod'] = $returnMethod;

        return $this;
    }

    /**
     * Gets returnPeriod
     *
     * @return \macropage\SDKs\ebay\rest\browse\Model\TimeDuration|null
     */
    public function getReturnPeriod()
    {
        return $this->container['returnPeriod'];
    }

    /**
     * Sets returnPeriod
     *
     * @param \macropage\SDKs\ebay\rest\browse\Model\TimeDuration|null $returnPeriod returnPeriod
     *
     * @return self
     */
    public function setReturnPeriod($returnPeriod)
    {
        $this->container['returnPeriod'] = $returnPeriod;

        return $this;
    }

    /**
     * Gets returnsAccepted
     *
     * @return bool|null
     */
    public function getReturnsAccepted()
    {
        return $this->container['returnsAccepted'];
    }

    /**
     * Sets returnsAccepted
     *
     * @param bool|null $returnsAccepted Indicates whether the seller accepts returns for the item.
     *
     * @return self
     */
    public function setReturnsAccepted($returnsAccepted)
    {
        $this->container['returnsAccepted'] = $returnsAccepted;

        return $this;
    }

    /**
     * Gets returnShippingCostPayer
     *
     * @return string|null
     */
    public function getReturnShippingCostPayer()
    {
        return $this->container['returnShippingCostPayer'];
    }

    /**
     * Sets returnShippingCostPayer
     *
     * @param string|null $returnShippingCostPayer This enumeration value indicates whether the buyer or seller is responsible for return shipping costs when an item is returned. <br><br><b> Valid Values: </b> <ul><li><b> SELLER</b> - Indicates the seller will pay for the shipping costs to return the item.</li>  <li><b> BUYER</b> - Indicates the buyer will pay for the shipping costs to return the item.</li>  </ul>  Code so that your app gracefully handles any future changes to this list. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:ReturnShippingCostPayerEnum'>eBay API documentation</a>
     *
     * @return self
     */
    public function setReturnShippingCostPayer($returnShippingCostPayer)
    {
        $this->container['returnShippingCostPayer'] = $returnShippingCostPayer;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


