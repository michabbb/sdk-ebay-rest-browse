<?php
/**
 * ItemSummary
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  macropage\SDKs\ebay\rest\browse
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Browse API
 *
 * <p>The Browse API has the following resources:</p>   <ul> <li><b> item_summary: </b> Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values.</li>  <li><b> search_by_image: </b><a href=\"https://developer.ebay.com/api-docs/static/versioning.html#experimental\" target=\"_blank\"><img src=\"/cms/img/docs/experimental-icon.svg\" class=\"legend-icon experimental-icon\" alt=\"Experimental Release\" title=\"Experimental Release\" />&nbsp;(Experimental)</a> Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters.</li>   <li><b> item: </b> <ul><li>Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part.</li> <li>Provides a bridge between the eBay legacy APIs, such as <b> Finding</b>, and the RESTful APIs, which use different formats for the item IDs.</li>  </ul> </li>  <li> <b> shopping_cart: </b> <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#experimental\" target=\"_blank\"><img src=\"/cms/img/docs/experimental-icon.svg\" class=\"legend-icon experimental-icon\" alt=\"Experimental Release\" title=\"Experimental Release\" />&nbsp;(Experimental)</a> <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited\" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp;<b> Note: </b> This resource is not available in the eBay API Explorer.</li></ul>       <p>The <b> item_summary</b>, <b> search_by_image</b>, and <b> item</b> resource calls require an <a href=\"/api-docs/static/oauth-client-credentials-grant.html\">Application access token</a>. The <b> shopping_cart</b> resource calls require a <a href=\"/api-docs/static/oauth-authorization-code-grant.html\">User access token</a>.</p>
 *
 * The version of the OpenAPI document: v1.11.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace macropage\SDKs\ebay\rest\browse\Model;

use \ArrayAccess;
use \macropage\SDKs\ebay\rest\browse\ObjectSerializer;

/**
 * ItemSummary Class Doc Comment
 *
 * @category Class
 * @description The type that defines the fields for the details of a specific item.
 * @package  macropage\SDKs\ebay\rest\browse
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ItemSummary implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ItemSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'additionalImages' => '\macropage\SDKs\ebay\rest\browse\Model\Image[]',
        'adultOnly' => 'bool',
        'availableCoupons' => 'bool',
        'bidCount' => 'int',
        'buyingOptions' => 'string[]',
        'categories' => '\macropage\SDKs\ebay\rest\browse\Model\Category[]',
        'compatibilityMatch' => 'string',
        'compatibilityProperties' => '\macropage\SDKs\ebay\rest\browse\Model\CompatibilityProperty[]',
        'condition' => 'string',
        'conditionId' => 'string',
        'currentBidPrice' => '\macropage\SDKs\ebay\rest\browse\Model\ConvertedAmount',
        'distanceFromPickupLocation' => '\macropage\SDKs\ebay\rest\browse\Model\TargetLocation',
        'energyEfficiencyClass' => 'string',
        'epid' => 'string',
        'image' => '\macropage\SDKs\ebay\rest\browse\Model\Image',
        'itemAffiliateWebUrl' => 'string',
        'itemEndDate' => 'string',
        'itemGroupHref' => 'string',
        'itemGroupType' => 'string',
        'itemHref' => 'string',
        'itemId' => 'string',
        'itemLocation' => '\macropage\SDKs\ebay\rest\browse\Model\ItemLocationImpl',
        'itemWebUrl' => 'string',
        'legacyItemId' => 'string',
        'marketingPrice' => '\macropage\SDKs\ebay\rest\browse\Model\MarketingPrice',
        'pickupOptions' => '\macropage\SDKs\ebay\rest\browse\Model\PickupOptionSummary[]',
        'price' => '\macropage\SDKs\ebay\rest\browse\Model\ConvertedAmount',
        'priceDisplayCondition' => 'string',
        'priorityListing' => 'bool',
        'qualifiedPrograms' => 'string[]',
        'seller' => '\macropage\SDKs\ebay\rest\browse\Model\Seller',
        'shippingOptions' => '\macropage\SDKs\ebay\rest\browse\Model\ShippingOptionSummary[]',
        'shortDescription' => 'string',
        'thumbnailImages' => '\macropage\SDKs\ebay\rest\browse\Model\Image[]',
        'title' => 'string',
        'topRatedBuyingExperience' => 'bool',
        'tyreLabelImageUrl' => 'string',
        'unitPrice' => '\macropage\SDKs\ebay\rest\browse\Model\ConvertedAmount',
        'unitPricingMeasure' => 'string',
        'watchCount' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'additionalImages' => null,
        'adultOnly' => null,
        'availableCoupons' => null,
        'bidCount' => 'int32',
        'buyingOptions' => null,
        'categories' => null,
        'compatibilityMatch' => null,
        'compatibilityProperties' => null,
        'condition' => null,
        'conditionId' => null,
        'currentBidPrice' => null,
        'distanceFromPickupLocation' => null,
        'energyEfficiencyClass' => null,
        'epid' => null,
        'image' => null,
        'itemAffiliateWebUrl' => null,
        'itemEndDate' => null,
        'itemGroupHref' => null,
        'itemGroupType' => null,
        'itemHref' => null,
        'itemId' => null,
        'itemLocation' => null,
        'itemWebUrl' => null,
        'legacyItemId' => null,
        'marketingPrice' => null,
        'pickupOptions' => null,
        'price' => null,
        'priceDisplayCondition' => null,
        'priorityListing' => null,
        'qualifiedPrograms' => null,
        'seller' => null,
        'shippingOptions' => null,
        'shortDescription' => null,
        'thumbnailImages' => null,
        'title' => null,
        'topRatedBuyingExperience' => null,
        'tyreLabelImageUrl' => null,
        'unitPrice' => null,
        'unitPricingMeasure' => null,
        'watchCount' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'additionalImages' => 'additionalImages',
        'adultOnly' => 'adultOnly',
        'availableCoupons' => 'availableCoupons',
        'bidCount' => 'bidCount',
        'buyingOptions' => 'buyingOptions',
        'categories' => 'categories',
        'compatibilityMatch' => 'compatibilityMatch',
        'compatibilityProperties' => 'compatibilityProperties',
        'condition' => 'condition',
        'conditionId' => 'conditionId',
        'currentBidPrice' => 'currentBidPrice',
        'distanceFromPickupLocation' => 'distanceFromPickupLocation',
        'energyEfficiencyClass' => 'energyEfficiencyClass',
        'epid' => 'epid',
        'image' => 'image',
        'itemAffiliateWebUrl' => 'itemAffiliateWebUrl',
        'itemEndDate' => 'itemEndDate',
        'itemGroupHref' => 'itemGroupHref',
        'itemGroupType' => 'itemGroupType',
        'itemHref' => 'itemHref',
        'itemId' => 'itemId',
        'itemLocation' => 'itemLocation',
        'itemWebUrl' => 'itemWebUrl',
        'legacyItemId' => 'legacyItemId',
        'marketingPrice' => 'marketingPrice',
        'pickupOptions' => 'pickupOptions',
        'price' => 'price',
        'priceDisplayCondition' => 'priceDisplayCondition',
        'priorityListing' => 'priorityListing',
        'qualifiedPrograms' => 'qualifiedPrograms',
        'seller' => 'seller',
        'shippingOptions' => 'shippingOptions',
        'shortDescription' => 'shortDescription',
        'thumbnailImages' => 'thumbnailImages',
        'title' => 'title',
        'topRatedBuyingExperience' => 'topRatedBuyingExperience',
        'tyreLabelImageUrl' => 'tyreLabelImageUrl',
        'unitPrice' => 'unitPrice',
        'unitPricingMeasure' => 'unitPricingMeasure',
        'watchCount' => 'watchCount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'additionalImages' => 'setAdditionalImages',
        'adultOnly' => 'setAdultOnly',
        'availableCoupons' => 'setAvailableCoupons',
        'bidCount' => 'setBidCount',
        'buyingOptions' => 'setBuyingOptions',
        'categories' => 'setCategories',
        'compatibilityMatch' => 'setCompatibilityMatch',
        'compatibilityProperties' => 'setCompatibilityProperties',
        'condition' => 'setCondition',
        'conditionId' => 'setConditionId',
        'currentBidPrice' => 'setCurrentBidPrice',
        'distanceFromPickupLocation' => 'setDistanceFromPickupLocation',
        'energyEfficiencyClass' => 'setEnergyEfficiencyClass',
        'epid' => 'setEpid',
        'image' => 'setImage',
        'itemAffiliateWebUrl' => 'setItemAffiliateWebUrl',
        'itemEndDate' => 'setItemEndDate',
        'itemGroupHref' => 'setItemGroupHref',
        'itemGroupType' => 'setItemGroupType',
        'itemHref' => 'setItemHref',
        'itemId' => 'setItemId',
        'itemLocation' => 'setItemLocation',
        'itemWebUrl' => 'setItemWebUrl',
        'legacyItemId' => 'setLegacyItemId',
        'marketingPrice' => 'setMarketingPrice',
        'pickupOptions' => 'setPickupOptions',
        'price' => 'setPrice',
        'priceDisplayCondition' => 'setPriceDisplayCondition',
        'priorityListing' => 'setPriorityListing',
        'qualifiedPrograms' => 'setQualifiedPrograms',
        'seller' => 'setSeller',
        'shippingOptions' => 'setShippingOptions',
        'shortDescription' => 'setShortDescription',
        'thumbnailImages' => 'setThumbnailImages',
        'title' => 'setTitle',
        'topRatedBuyingExperience' => 'setTopRatedBuyingExperience',
        'tyreLabelImageUrl' => 'setTyreLabelImageUrl',
        'unitPrice' => 'setUnitPrice',
        'unitPricingMeasure' => 'setUnitPricingMeasure',
        'watchCount' => 'setWatchCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'additionalImages' => 'getAdditionalImages',
        'adultOnly' => 'getAdultOnly',
        'availableCoupons' => 'getAvailableCoupons',
        'bidCount' => 'getBidCount',
        'buyingOptions' => 'getBuyingOptions',
        'categories' => 'getCategories',
        'compatibilityMatch' => 'getCompatibilityMatch',
        'compatibilityProperties' => 'getCompatibilityProperties',
        'condition' => 'getCondition',
        'conditionId' => 'getConditionId',
        'currentBidPrice' => 'getCurrentBidPrice',
        'distanceFromPickupLocation' => 'getDistanceFromPickupLocation',
        'energyEfficiencyClass' => 'getEnergyEfficiencyClass',
        'epid' => 'getEpid',
        'image' => 'getImage',
        'itemAffiliateWebUrl' => 'getItemAffiliateWebUrl',
        'itemEndDate' => 'getItemEndDate',
        'itemGroupHref' => 'getItemGroupHref',
        'itemGroupType' => 'getItemGroupType',
        'itemHref' => 'getItemHref',
        'itemId' => 'getItemId',
        'itemLocation' => 'getItemLocation',
        'itemWebUrl' => 'getItemWebUrl',
        'legacyItemId' => 'getLegacyItemId',
        'marketingPrice' => 'getMarketingPrice',
        'pickupOptions' => 'getPickupOptions',
        'price' => 'getPrice',
        'priceDisplayCondition' => 'getPriceDisplayCondition',
        'priorityListing' => 'getPriorityListing',
        'qualifiedPrograms' => 'getQualifiedPrograms',
        'seller' => 'getSeller',
        'shippingOptions' => 'getShippingOptions',
        'shortDescription' => 'getShortDescription',
        'thumbnailImages' => 'getThumbnailImages',
        'title' => 'getTitle',
        'topRatedBuyingExperience' => 'getTopRatedBuyingExperience',
        'tyreLabelImageUrl' => 'getTyreLabelImageUrl',
        'unitPrice' => 'getUnitPrice',
        'unitPricingMeasure' => 'getUnitPricingMeasure',
        'watchCount' => 'getWatchCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['additionalImages'] = $data['additionalImages'] ?? null;
        $this->container['adultOnly'] = $data['adultOnly'] ?? null;
        $this->container['availableCoupons'] = $data['availableCoupons'] ?? null;
        $this->container['bidCount'] = $data['bidCount'] ?? null;
        $this->container['buyingOptions'] = $data['buyingOptions'] ?? null;
        $this->container['categories'] = $data['categories'] ?? null;
        $this->container['compatibilityMatch'] = $data['compatibilityMatch'] ?? null;
        $this->container['compatibilityProperties'] = $data['compatibilityProperties'] ?? null;
        $this->container['condition'] = $data['condition'] ?? null;
        $this->container['conditionId'] = $data['conditionId'] ?? null;
        $this->container['currentBidPrice'] = $data['currentBidPrice'] ?? null;
        $this->container['distanceFromPickupLocation'] = $data['distanceFromPickupLocation'] ?? null;
        $this->container['energyEfficiencyClass'] = $data['energyEfficiencyClass'] ?? null;
        $this->container['epid'] = $data['epid'] ?? null;
        $this->container['image'] = $data['image'] ?? null;
        $this->container['itemAffiliateWebUrl'] = $data['itemAffiliateWebUrl'] ?? null;
        $this->container['itemEndDate'] = $data['itemEndDate'] ?? null;
        $this->container['itemGroupHref'] = $data['itemGroupHref'] ?? null;
        $this->container['itemGroupType'] = $data['itemGroupType'] ?? null;
        $this->container['itemHref'] = $data['itemHref'] ?? null;
        $this->container['itemId'] = $data['itemId'] ?? null;
        $this->container['itemLocation'] = $data['itemLocation'] ?? null;
        $this->container['itemWebUrl'] = $data['itemWebUrl'] ?? null;
        $this->container['legacyItemId'] = $data['legacyItemId'] ?? null;
        $this->container['marketingPrice'] = $data['marketingPrice'] ?? null;
        $this->container['pickupOptions'] = $data['pickupOptions'] ?? null;
        $this->container['price'] = $data['price'] ?? null;
        $this->container['priceDisplayCondition'] = $data['priceDisplayCondition'] ?? null;
        $this->container['priorityListing'] = $data['priorityListing'] ?? null;
        $this->container['qualifiedPrograms'] = $data['qualifiedPrograms'] ?? null;
        $this->container['seller'] = $data['seller'] ?? null;
        $this->container['shippingOptions'] = $data['shippingOptions'] ?? null;
        $this->container['shortDescription'] = $data['shortDescription'] ?? null;
        $this->container['thumbnailImages'] = $data['thumbnailImages'] ?? null;
        $this->container['title'] = $data['title'] ?? null;
        $this->container['topRatedBuyingExperience'] = $data['topRatedBuyingExperience'] ?? null;
        $this->container['tyreLabelImageUrl'] = $data['tyreLabelImageUrl'] ?? null;
        $this->container['unitPrice'] = $data['unitPrice'] ?? null;
        $this->container['unitPricingMeasure'] = $data['unitPricingMeasure'] ?? null;
        $this->container['watchCount'] = $data['watchCount'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets additionalImages
     *
     * @return \macropage\SDKs\ebay\rest\browse\Model\Image[]|null
     */
    public function getAdditionalImages()
    {
        return $this->container['additionalImages'];
    }

    /**
     * Sets additionalImages
     *
     * @param \macropage\SDKs\ebay\rest\browse\Model\Image[]|null $additionalImages An array of containers with the URLs for the images that are in addition to the primary image.  The primary image is returned in the <b> image.imageUrl</b> field.
     *
     * @return self
     */
    public function setAdditionalImages($additionalImages)
    {
        $this->container['additionalImages'] = $additionalImages;

        return $this;
    }

    /**
     * Gets adultOnly
     *
     * @return bool|null
     */
    public function getAdultOnly()
    {
        return $this->container['adultOnly'];
    }

    /**
     * Sets adultOnly
     *
     * @param bool|null $adultOnly This indicates if the item is for adults only. For more information about adult-only items on eBay, see <a href=\"https://pages.ebay.com/help/policies/adult-only.html\" target=\"_blank\">Adult items policy</a> for sellers and <a href=\"https://www.ebay.com/help/terms-conditions/default/searching-adult-items?id=4661\" target=\"_blank\">Adult-Only items on eBay</a> for buyers.
     *
     * @return self
     */
    public function setAdultOnly($adultOnly)
    {
        $this->container['adultOnly'] = $adultOnly;

        return $this;
    }

    /**
     * Gets availableCoupons
     *
     * @return bool|null
     */
    public function getAvailableCoupons()
    {
        return $this->container['availableCoupons'];
    }

    /**
     * Sets availableCoupons
     *
     * @param bool|null $availableCoupons This boolean attribute indicates if coupons are available for the item.
     *
     * @return self
     */
    public function setAvailableCoupons($availableCoupons)
    {
        $this->container['availableCoupons'] = $availableCoupons;

        return $this;
    }

    /**
     * Gets bidCount
     *
     * @return int|null
     */
    public function getBidCount()
    {
        return $this->container['bidCount'];
    }

    /**
     * Sets bidCount
     *
     * @param int|null $bidCount This integer value indicates the total number of bids that have been placed for an auction item. This field is only returned for auction items.
     *
     * @return self
     */
    public function setBidCount($bidCount)
    {
        $this->container['bidCount'] = $bidCount;

        return $this;
    }

    /**
     * Gets buyingOptions
     *
     * @return string[]|null
     */
    public function getBuyingOptions()
    {
        return $this->container['buyingOptions'];
    }

    /**
     * Sets buyingOptions
     *
     * @param string[]|null $buyingOptions A comma separated list of all the purchase options available for the item. <br><br><b> Values Returned: </b>   <ul> <li><b>FIXED_PRICE</b> - Indicates the buyer can purchase the item for a set price using the Buy It Now button. </li>  <li><b> AUCTION</b> - Indicates the buyer can place a bid for the item. After the first bid is placed, this becomes a live auction item and is the only buying option for this item.</li>  <li><b> BEST_OFFER</b> - Items where the buyer can send the seller a price they're willing to pay for the item. The seller can accept, reject, or send a counter offer. For details about Best Offer, see <a href=\"https://www.ebay.com/help/selling/listings/selling-buy-now/adding-best-offer-listing?id=4144\" target=\"_blank\">Best Offer</a>.  </li></ul> Code so that your app gracefully handles any future changes to this list.
     *
     * @return self
     */
    public function setBuyingOptions($buyingOptions)
    {
        $this->container['buyingOptions'] = $buyingOptions;

        return $this;
    }

    /**
     * Gets categories
     *
     * @return \macropage\SDKs\ebay\rest\browse\Model\Category[]|null
     */
    public function getCategories()
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     *
     * @param \macropage\SDKs\ebay\rest\browse\Model\Category[]|null $categories This container returns the primary category ID of the item (as well as the secondary category if the item was listed in two categories).
     *
     * @return self
     */
    public function setCategories($categories)
    {
        $this->container['categories'] = $categories;

        return $this;
    }

    /**
     * Gets compatibilityMatch
     *
     * @return string|null
     */
    public function getCompatibilityMatch()
    {
        return $this->container['compatibilityMatch'];
    }

    /**
     * Sets compatibilityMatch
     *
     * @param string|null $compatibilityMatch This indicates how well the item matches the <b>compatibility_filter</b> product attributes.  <br><br><b> Valid Values: </b> EXACT or POSSIBLE <br /><br />Code so that your app gracefully handles any future changes to this list. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:CompatibilityMatchEnum'>eBay API documentation</a>
     *
     * @return self
     */
    public function setCompatibilityMatch($compatibilityMatch)
    {
        $this->container['compatibilityMatch'] = $compatibilityMatch;

        return $this;
    }

    /**
     * Gets compatibilityProperties
     *
     * @return \macropage\SDKs\ebay\rest\browse\Model\CompatibilityProperty[]|null
     */
    public function getCompatibilityProperties()
    {
        return $this->container['compatibilityProperties'];
    }

    /**
     * Sets compatibilityProperties
     *
     * @param \macropage\SDKs\ebay\rest\browse\Model\CompatibilityProperty[]|null $compatibilityProperties This container returns only the product attributes that are compatible with the item. These attributes were specified in the <b>compatibility_filter</b> in the request. This means that if you passed in 5 attributes and only 4 are compatible, only those 4 are returned. If none of the attributes are compatible, this container is not returned.
     *
     * @return self
     */
    public function setCompatibilityProperties($compatibilityProperties)
    {
        $this->container['compatibilityProperties'] = $compatibilityProperties;

        return $this;
    }

    /**
     * Gets condition
     *
     * @return string|null
     */
    public function getCondition()
    {
        return $this->container['condition'];
    }

    /**
     * Sets condition
     *
     * @param string|null $condition The text describing the condition of the item, such as New or Used. For a list of condition names, see <a href=\"https://developer.ebay.com/devzone/finding/callref/enums/conditionIdList.html\" target=\"_blank\">Item Condition IDs and Names</a>.  <br /><br />Code so that your app gracefully handles any future changes to this list. <br /><br /><span class=\"tablenote\"><b> Note: </b>As of September 1, 2021, condition ID 2500 ('Seller Refurbished') is no longer a valid item condition in the <b>Cell Phones & Smartphones</b> category (category ID 9355) for the following marketplaces: US, Canada, UK, Germany, and Australia. This refurbished item condition has been replaced by three new refurbished values, which include 'Excellent - Refurbished' (condition ID 2010), 'Very Good - Refurbished' (condition ID 2020), and 'Good - Refurbished' (condition ID 2030).</span>
     *
     * @return self
     */
    public function setCondition($condition)
    {
        $this->container['condition'] = $condition;

        return $this;
    }

    /**
     * Gets conditionId
     *
     * @return string|null
     */
    public function getConditionId()
    {
        return $this->container['conditionId'];
    }

    /**
     * Sets conditionId
     *
     * @param string|null $conditionId The identifier of the condition of the item. For example, 1000 is the identifier for NEW. For a list of condition names and IDs, see <a https://developer.ebay.com/devzone/finding/callref/enums/conditionIdList.html\" target=\"_blank\">Item Condition IDs and Names</a>. <br /><br />Code so that your app gracefully handles any future changes to this list.<br /><br /><span class=\"tablenote\"><b> Note: </b>As of September 1, 2021, condition ID 2500 ('Seller Refurbished') is no longer a valid item condition in the <b>Cell Phones & Smartphones</b> category (category ID 9355) for the following marketplaces: US, Canada, UK, Germany, and Australia. This refurbished item condition has been replaced by three new refurbished values, which include 'Excellent - Refurbished' (condition ID 2010), 'Very Good - Refurbished' (condition ID 2020), and 'Good - Refurbished' (condition ID 2030).</span>
     *
     * @return self
     */
    public function setConditionId($conditionId)
    {
        $this->container['conditionId'] = $conditionId;

        return $this;
    }

    /**
     * Gets currentBidPrice
     *
     * @return \macropage\SDKs\ebay\rest\browse\Model\ConvertedAmount|null
     */
    public function getCurrentBidPrice()
    {
        return $this->container['currentBidPrice'];
    }

    /**
     * Sets currentBidPrice
     *
     * @param \macropage\SDKs\ebay\rest\browse\Model\ConvertedAmount|null $currentBidPrice currentBidPrice
     *
     * @return self
     */
    public function setCurrentBidPrice($currentBidPrice)
    {
        $this->container['currentBidPrice'] = $currentBidPrice;

        return $this;
    }

    /**
     * Gets distanceFromPickupLocation
     *
     * @return \macropage\SDKs\ebay\rest\browse\Model\TargetLocation|null
     */
    public function getDistanceFromPickupLocation()
    {
        return $this->container['distanceFromPickupLocation'];
    }

    /**
     * Sets distanceFromPickupLocation
     *
     * @param \macropage\SDKs\ebay\rest\browse\Model\TargetLocation|null $distanceFromPickupLocation distanceFromPickupLocation
     *
     * @return self
     */
    public function setDistanceFromPickupLocation($distanceFromPickupLocation)
    {
        $this->container['distanceFromPickupLocation'] = $distanceFromPickupLocation;

        return $this;
    }

    /**
     * Gets energyEfficiencyClass
     *
     * @return string|null
     */
    public function getEnergyEfficiencyClass()
    {
        return $this->container['energyEfficiencyClass'];
    }

    /**
     * Sets energyEfficiencyClass
     *
     * @param string|null $energyEfficiencyClass This indicates the <a href=\"https://en.wikipedia.org/wiki/European_Union_energy_label\">European energy efficiency</a> rating (EEK) of the item.  Energy efficiency ratings apply to products listed by commercial vendors in electronics categories only. <br /><br />Currently, this field is only applicable for the Germany site, and  is only returned if the seller specified the energy efficiency rating through item specifics at listing time. Rating values include <code>A+++</code>, <code>A++</code>, <code>A+</code>, <code>A</code>, <code>B</code>, <code>C</code>, <code>D</code>, <code>E</code>, <code>F</code>, and <code>G</code>.
     *
     * @return self
     */
    public function setEnergyEfficiencyClass($energyEfficiencyClass)
    {
        $this->container['energyEfficiencyClass'] = $energyEfficiencyClass;

        return $this;
    }

    /**
     * Gets epid
     *
     * @return string|null
     */
    public function getEpid()
    {
        return $this->container['epid'];
    }

    /**
     * Sets epid
     *
     * @param string|null $epid An ePID is the eBay product identifier of a product from the eBay product catalog.  This indicates the product in which the item belongs.
     *
     * @return self
     */
    public function setEpid($epid)
    {
        $this->container['epid'] = $epid;

        return $this;
    }

    /**
     * Gets image
     *
     * @return \macropage\SDKs\ebay\rest\browse\Model\Image|null
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param \macropage\SDKs\ebay\rest\browse\Model\Image|null $image image
     *
     * @return self
     */
    public function setImage($image)
    {
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets itemAffiliateWebUrl
     *
     * @return string|null
     */
    public function getItemAffiliateWebUrl()
    {
        return $this->container['itemAffiliateWebUrl'];
    }

    /**
     * Sets itemAffiliateWebUrl
     *
     * @param string|null $itemAffiliateWebUrl The URL to the View Item page of the item, which includes the affiliate tracking ID. This field is only returned if the seller enables affiliate tracking for the item by including the <code><a href=\"/api-docs/buy/static/api-browse.html#Headers\">X-EBAY-C-ENDUSERCTX</a></code> request header in the method.  <br /> <br /><span class=\"tablenote\"><b>Note: </b> eBay Partner Network, in order to receive a commission for your sales, you must use this URL to forward your buyer to the ebay.com site. </span>
     *
     * @return self
     */
    public function setItemAffiliateWebUrl($itemAffiliateWebUrl)
    {
        $this->container['itemAffiliateWebUrl'] = $itemAffiliateWebUrl;

        return $this;
    }

    /**
     * Gets itemEndDate
     *
     * @return string|null
     */
    public function getItemEndDate()
    {
        return $this->container['itemEndDate'];
    }

    /**
     * Sets itemEndDate
     *
     * @param string|null $itemEndDate The date and time up to which the item can be purchased.  This value is returned in UTC format (yyyy-MM-ddThh:mm:ss.sssZ), which you can convert into the local time of the buyer.<br /><br /><span class=\"tablenote\"><b> Note: </b>This field is not returned for Good 'Til Cancelled (GTC) listings.</span>
     *
     * @return self
     */
    public function setItemEndDate($itemEndDate)
    {
        $this->container['itemEndDate'] = $itemEndDate;

        return $this;
    }

    /**
     * Gets itemGroupHref
     *
     * @return string|null
     */
    public function getItemGroupHref()
    {
        return $this->container['itemGroupHref'];
    }

    /**
     * Sets itemGroupHref
     *
     * @param string|null $itemGroupHref The HATEOAS reference of the parent page of the item group. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc. <br /> <br /><span class=\"tablenote\"> <b>  Note: </b>This field is returned only for item groups.</span>
     *
     * @return self
     */
    public function setItemGroupHref($itemGroupHref)
    {
        $this->container['itemGroupHref'] = $itemGroupHref;

        return $this;
    }

    /**
     * Gets itemGroupType
     *
     * @return string|null
     */
    public function getItemGroupType()
    {
        return $this->container['itemGroupType'];
    }

    /**
     * Sets itemGroupType
     *
     * @param string|null $itemGroupType The indicates the item group type. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc. <br /><br />Currently only the <code>SELLER_DEFINED_VARIATIONS</code> is supported and indicates this is an item group created by the seller. <br /> <br /><span class=\"tablenote\"> <b> Note: </b>This field is returned only for item groups.</span><br /><br />Code so that your app gracefully handles any future changes to this list.
     *
     * @return self
     */
    public function setItemGroupType($itemGroupType)
    {
        $this->container['itemGroupType'] = $itemGroupType;

        return $this;
    }

    /**
     * Gets itemHref
     *
     * @return string|null
     */
    public function getItemHref()
    {
        return $this->container['itemHref'];
    }

    /**
     * Sets itemHref
     *
     * @param string|null $itemHref The URI for the Browse API <a href=\"/api-docs/buy/browse/resources/item/methods/getItem\">getItem</a> method, which can be used to retrieve more details about items in the search results.
     *
     * @return self
     */
    public function setItemHref($itemHref)
    {
        $this->container['itemHref'] = $itemHref;

        return $this;
    }

    /**
     * Gets itemId
     *
     * @return string|null
     */
    public function getItemId()
    {
        return $this->container['itemId'];
    }

    /**
     * Sets itemId
     *
     * @param string|null $itemId The unique RESTful identifier of the item.
     *
     * @return self
     */
    public function setItemId($itemId)
    {
        $this->container['itemId'] = $itemId;

        return $this;
    }

    /**
     * Gets itemLocation
     *
     * @return \macropage\SDKs\ebay\rest\browse\Model\ItemLocationImpl|null
     */
    public function getItemLocation()
    {
        return $this->container['itemLocation'];
    }

    /**
     * Sets itemLocation
     *
     * @param \macropage\SDKs\ebay\rest\browse\Model\ItemLocationImpl|null $itemLocation itemLocation
     *
     * @return self
     */
    public function setItemLocation($itemLocation)
    {
        $this->container['itemLocation'] = $itemLocation;

        return $this;
    }

    /**
     * Gets itemWebUrl
     *
     * @return string|null
     */
    public function getItemWebUrl()
    {
        return $this->container['itemWebUrl'];
    }

    /**
     * Sets itemWebUrl
     *
     * @param string|null $itemWebUrl The URL to the View Item page of the item.  This enables you to include a \"Report Item on eBay\" hyperlink that takes the buyer to the View Item page on eBay. From there they can report any issues regarding this item to eBay.
     *
     * @return self
     */
    public function setItemWebUrl($itemWebUrl)
    {
        $this->container['itemWebUrl'] = $itemWebUrl;

        return $this;
    }

    /**
     * Gets legacyItemId
     *
     * @return string|null
     */
    public function getLegacyItemId()
    {
        return $this->container['legacyItemId'];
    }

    /**
     * Sets legacyItemId
     *
     * @param string|null $legacyItemId The unique identifier of the eBay listing that contains the item. This is the traditional/legacy ID that is often seen in the URL of the listing View Item page.
     *
     * @return self
     */
    public function setLegacyItemId($legacyItemId)
    {
        $this->container['legacyItemId'] = $legacyItemId;

        return $this;
    }

    /**
     * Gets marketingPrice
     *
     * @return \macropage\SDKs\ebay\rest\browse\Model\MarketingPrice|null
     */
    public function getMarketingPrice()
    {
        return $this->container['marketingPrice'];
    }

    /**
     * Sets marketingPrice
     *
     * @param \macropage\SDKs\ebay\rest\browse\Model\MarketingPrice|null $marketingPrice marketingPrice
     *
     * @return self
     */
    public function setMarketingPrice($marketingPrice)
    {
        $this->container['marketingPrice'] = $marketingPrice;

        return $this;
    }

    /**
     * Gets pickupOptions
     *
     * @return \macropage\SDKs\ebay\rest\browse\Model\PickupOptionSummary[]|null
     */
    public function getPickupOptions()
    {
        return $this->container['pickupOptions'];
    }

    /**
     * Sets pickupOptions
     *
     * @param \macropage\SDKs\ebay\rest\browse\Model\PickupOptionSummary[]|null $pickupOptions This container returns the local pickup options available to the buyer. This container is only returned if the user is searching for local pickup items and set the local pickup filters in the method request.
     *
     * @return self
     */
    public function setPickupOptions($pickupOptions)
    {
        $this->container['pickupOptions'] = $pickupOptions;

        return $this;
    }

    /**
     * Gets price
     *
     * @return \macropage\SDKs\ebay\rest\browse\Model\ConvertedAmount|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param \macropage\SDKs\ebay\rest\browse\Model\ConvertedAmount|null $price price
     *
     * @return self
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets priceDisplayCondition
     *
     * @return string|null
     */
    public function getPriceDisplayCondition()
    {
        return $this->container['priceDisplayCondition'];
    }

    /**
     * Sets priceDisplayCondition
     *
     * @param string|null $priceDisplayCondition Indicates when in the buying flow the item's price can appear for minimum advertised price (MAP) items, which is the lowest price a retailer can advertise/show for this item. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:PriceDisplayConditionEnum'>eBay API documentation</a>
     *
     * @return self
     */
    public function setPriceDisplayCondition($priceDisplayCondition)
    {
        $this->container['priceDisplayCondition'] = $priceDisplayCondition;

        return $this;
    }

    /**
     * Gets priorityListing
     *
     * @return bool|null
     */
    public function getPriorityListing()
    {
        return $this->container['priorityListing'];
    }

    /**
     * Sets priorityListing
     *
     * @param bool|null $priorityListing This field is returned as <code>true</code> if the listing is part of a Promoted Listing campaign. Promoted Listings are available to Above Standard and Top Rated sellers with recent sales activity.<br /><br /><span class=\"tablenote\"><b>Note:</b> Priority Listing is returned only with a Best Match sort and will not be returned for other sort options.</span>
     *
     * @return self
     */
    public function setPriorityListing($priorityListing)
    {
        $this->container['priorityListing'] = $priorityListing;

        return $this;
    }

    /**
     * Gets qualifiedPrograms
     *
     * @return string[]|null
     */
    public function getQualifiedPrograms()
    {
        return $this->container['qualifiedPrograms'];
    }

    /**
     * Sets qualifiedPrograms
     *
     * @param string[]|null $qualifiedPrograms An array of the qualified programs available for the item, such as EBAY_PLUS, AUTHENTICITY_GUARANTEE, and AUTHENTICITY_VERIFICATION.<br /><br />eBay Plus is a premium account option for buyers, which provides benefits such as fast free domestic shipping and free returns on selected items. Top-Rated eBay sellers must opt in to eBay Plus to be able to offer the program on qualifying listings. Sellers must commit to next-day delivery of those items.<br /><br /><span class=\"tablenote\"><b>Note: </b> eBay Plus is available only to buyers in Germany, Austria, and Australia marketplaces.</span><br /><br />The eBay <a href=\"https://pages.ebay.com/authenticity-guarantee/\" target=\"_blank\">Authenticity Guarantee</a> program enables third-party authenticators to perform authentication verification inspections on items such as watches and sneakers.
     *
     * @return self
     */
    public function setQualifiedPrograms($qualifiedPrograms)
    {
        $this->container['qualifiedPrograms'] = $qualifiedPrograms;

        return $this;
    }

    /**
     * Gets seller
     *
     * @return \macropage\SDKs\ebay\rest\browse\Model\Seller|null
     */
    public function getSeller()
    {
        return $this->container['seller'];
    }

    /**
     * Sets seller
     *
     * @param \macropage\SDKs\ebay\rest\browse\Model\Seller|null $seller seller
     *
     * @return self
     */
    public function setSeller($seller)
    {
        $this->container['seller'] = $seller;

        return $this;
    }

    /**
     * Gets shippingOptions
     *
     * @return \macropage\SDKs\ebay\rest\browse\Model\ShippingOptionSummary[]|null
     */
    public function getShippingOptions()
    {
        return $this->container['shippingOptions'];
    }

    /**
     * Sets shippingOptions
     *
     * @param \macropage\SDKs\ebay\rest\browse\Model\ShippingOptionSummary[]|null $shippingOptions This container returns the shipping options available to ship the item.
     *
     * @return self
     */
    public function setShippingOptions($shippingOptions)
    {
        $this->container['shippingOptions'] = $shippingOptions;

        return $this;
    }

    /**
     * Gets shortDescription
     *
     * @return string|null
     */
    public function getShortDescription()
    {
        return $this->container['shortDescription'];
    }

    /**
     * Sets shortDescription
     *
     * @param string|null $shortDescription This text string is derived from the item condition and the item aspects (such as size, color, capacity, model, brand, etc.). Sometimes the title doesn't give enough information but the description is too big. Surfacing the <b>shortDescription</b> can often provide buyers with the additional information that could help them make a buying decision.  <br /><br />For example: <br /><br />    <code>   \"<b> title</b>\": \"Petrel U42W FPV Drone RC Quadcopter w/HD Camera Live Video One Key Off / Landing\", <br />\"<b>shortDescription</b>\": \"1 U42W Quadcopter. Syma X5SW-V3 Wifi FPV RC Drone Quadcopter 2.4Ghz 6-Axis Gyro with Headless Mode. Syma X20 Pocket Drone 2.4Ghz Mini RC Quadcopter Headless Mode Altitude Hold. One Key Take Off / Landing function: allow beginner to easy to fly the drone without any skill.\",</code>       <br /><br /><b>Restriction: </b> This field is returned by the <b> search</b> method only when <b> fieldgroups</b> = <code>EXTENDED</code>.
     *
     * @return self
     */
    public function setShortDescription($shortDescription)
    {
        $this->container['shortDescription'] = $shortDescription;

        return $this;
    }

    /**
     * Gets thumbnailImages
     *
     * @return \macropage\SDKs\ebay\rest\browse\Model\Image[]|null
     */
    public function getThumbnailImages()
    {
        return $this->container['thumbnailImages'];
    }

    /**
     * Sets thumbnailImages
     *
     * @param \macropage\SDKs\ebay\rest\browse\Model\Image[]|null $thumbnailImages An array of thumbnail images for the item.
     *
     * @return self
     */
    public function setThumbnailImages($thumbnailImages)
    {
        $this->container['thumbnailImages'] = $thumbnailImages;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title The seller-created title of the item. <br><br><b>Maximum Length: </b> 80 characters
     *
     * @return self
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets topRatedBuyingExperience
     *
     * @return bool|null
     */
    public function getTopRatedBuyingExperience()
    {
        return $this->container['topRatedBuyingExperience'];
    }

    /**
     * Sets topRatedBuyingExperience
     *
     * @param bool|null $topRatedBuyingExperience This indicates if the item is a top-rated plus item. There are three benefits of a top-rated plus item: a  minimum 30-day money-back return policy, shipping the item in 1 business day with tracking provided, and the added comfort of knowing that this item is from an experienced seller with the highest buyer ratings. See the <a href=\"https://pages.ebay.com/topratedplus/index.html\" target=\"_blank\">Top Rated Plus Items </a> and  <a href=\"https://pages.ebay.com/help/sell/top-rated.html\" target=\"_blank\">Becoming a Top Rated Seller and qualifying for Top Rated Plus</a> help topics for more information.
     *
     * @return self
     */
    public function setTopRatedBuyingExperience($topRatedBuyingExperience)
    {
        $this->container['topRatedBuyingExperience'] = $topRatedBuyingExperience;

        return $this;
    }

    /**
     * Gets tyreLabelImageUrl
     *
     * @return string|null
     */
    public function getTyreLabelImageUrl()
    {
        return $this->container['tyreLabelImageUrl'];
    }

    /**
     * Sets tyreLabelImageUrl
     *
     * @param string|null $tyreLabelImageUrl The URL to the image that shows the information on the tyre label.
     *
     * @return self
     */
    public function setTyreLabelImageUrl($tyreLabelImageUrl)
    {
        $this->container['tyreLabelImageUrl'] = $tyreLabelImageUrl;

        return $this;
    }

    /**
     * Gets unitPrice
     *
     * @return \macropage\SDKs\ebay\rest\browse\Model\ConvertedAmount|null
     */
    public function getUnitPrice()
    {
        return $this->container['unitPrice'];
    }

    /**
     * Sets unitPrice
     *
     * @param \macropage\SDKs\ebay\rest\browse\Model\ConvertedAmount|null $unitPrice unitPrice
     *
     * @return self
     */
    public function setUnitPrice($unitPrice)
    {
        $this->container['unitPrice'] = $unitPrice;

        return $this;
    }

    /**
     * Gets unitPricingMeasure
     *
     * @return string|null
     */
    public function getUnitPricingMeasure()
    {
        return $this->container['unitPricingMeasure'];
    }

    /**
     * Sets unitPricingMeasure
     *
     * @param string|null $unitPricingMeasure The designation, such as size, weight, volume, count, etc., that was used to specify the quantity of the item. This helps buyers compare prices. <br /><br />For example, the following tells the buyer that the item is 7.99 per 100 grams. <br /><br /><code>\"unitPricingMeasure\": \"100g\",<br /> \"unitPrice\": {<br />&nbsp;&nbsp;\"value\": \"7.99\",<br />&nbsp;&nbsp;\"currency\": \"GBP\"</code>
     *
     * @return self
     */
    public function setUnitPricingMeasure($unitPricingMeasure)
    {
        $this->container['unitPricingMeasure'] = $unitPricingMeasure;

        return $this;
    }

    /**
     * Gets watchCount
     *
     * @return int|null
     */
    public function getWatchCount()
    {
        return $this->container['watchCount'];
    }

    /**
     * Sets watchCount
     *
     * @param int|null $watchCount The number of users that have added the item to their watch list.<br /><br /><span class=\"tablenote\"> <strong>Note:</strong> This field is restricted to applications that have been granted permission to access this feature. You must submit an <a href=\"https://developer.ebay.com/my/support/tickets?tab=app-check\">App Check ticket</a> to request this access. In the App Check form, add a note to the <b>Application Title/Summary</b> and/or <b>Application Details</b> fields that you want access to Watch Count data in the Browse API.</span>
     *
     * @return self
     */
    public function setWatchCount($watchCount)
    {
        $this->container['watchCount'] = $watchCount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


