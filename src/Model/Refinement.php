<?php
/**
 * Refinement
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  macropage\SDKs\ebay\rest\browse
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Browse API
 *
 * <p>The Browse API has the following resources:</p>   <ul> <li><b> item_summary: </b> Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values.</li>  <li><b> search_by_image: </b><a href=\"https://developer.ebay.com/api-docs/static/versioning.html#experimental\" target=\"_blank\"><img src=\"/cms/img/docs/experimental-icon.svg\" class=\"legend-icon experimental-icon\" alt=\"Experimental Release\" title=\"Experimental Release\" />&nbsp;(Experimental)</a> Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters.</li>   <li><b> item: </b> <ul><li>Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part.</li> <li>Provides a bridge between the eBay legacy APIs, such as <b> Finding</b>, and the RESTful APIs, which use different formats for the item IDs.</li>  </ul> </li>  <li> <b> shopping_cart: </b> <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#experimental\" target=\"_blank\"><img src=\"/cms/img/docs/experimental-icon.svg\" class=\"legend-icon experimental-icon\" alt=\"Experimental Release\" title=\"Experimental Release\" />&nbsp;(Experimental)</a> <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited\" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp;<b> Note: </b> This resource is not available in the eBay API Explorer.</li></ul>       <p>The <b> item_summary</b>, <b> search_by_image</b>, and <b> item</b> resource calls require an <a href=\"/api-docs/static/oauth-client-credentials-grant.html\">Application access token</a>. The <b> shopping_cart</b> resource calls require a <a href=\"/api-docs/static/oauth-authorization-code-grant.html\">User access token</a>.</p>
 *
 * The version of the OpenAPI document: v1.11.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace macropage\SDKs\ebay\rest\browse\Model;

use \ArrayAccess;
use \macropage\SDKs\ebay\rest\browse\ObjectSerializer;

/**
 * Refinement Class Doc Comment
 *
 * @category Class
 * @description This type defines the fields for the various refinements of an item. You can use the information in this container to create histograms, which help shoppers choose exactly what they want.
 * @package  macropage\SDKs\ebay\rest\browse
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Refinement implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Refinement';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'aspectDistributions' => '\macropage\SDKs\ebay\rest\browse\Model\AspectDistribution[]',
        'buyingOptionDistributions' => '\macropage\SDKs\ebay\rest\browse\Model\BuyingOptionDistribution[]',
        'categoryDistributions' => '\macropage\SDKs\ebay\rest\browse\Model\CategoryDistribution[]',
        'conditionDistributions' => '\macropage\SDKs\ebay\rest\browse\Model\ConditionDistribution[]',
        'dominantCategoryId' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'aspectDistributions' => null,
        'buyingOptionDistributions' => null,
        'categoryDistributions' => null,
        'conditionDistributions' => null,
        'dominantCategoryId' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'aspectDistributions' => 'aspectDistributions',
        'buyingOptionDistributions' => 'buyingOptionDistributions',
        'categoryDistributions' => 'categoryDistributions',
        'conditionDistributions' => 'conditionDistributions',
        'dominantCategoryId' => 'dominantCategoryId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'aspectDistributions' => 'setAspectDistributions',
        'buyingOptionDistributions' => 'setBuyingOptionDistributions',
        'categoryDistributions' => 'setCategoryDistributions',
        'conditionDistributions' => 'setConditionDistributions',
        'dominantCategoryId' => 'setDominantCategoryId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'aspectDistributions' => 'getAspectDistributions',
        'buyingOptionDistributions' => 'getBuyingOptionDistributions',
        'categoryDistributions' => 'getCategoryDistributions',
        'conditionDistributions' => 'getConditionDistributions',
        'dominantCategoryId' => 'getDominantCategoryId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['aspectDistributions'] = $data['aspectDistributions'] ?? null;
        $this->container['buyingOptionDistributions'] = $data['buyingOptionDistributions'] ?? null;
        $this->container['categoryDistributions'] = $data['categoryDistributions'] ?? null;
        $this->container['conditionDistributions'] = $data['conditionDistributions'] ?? null;
        $this->container['dominantCategoryId'] = $data['dominantCategoryId'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets aspectDistributions
     *
     * @return \macropage\SDKs\ebay\rest\browse\Model\AspectDistribution[]|null
     */
    public function getAspectDistributions()
    {
        return $this->container['aspectDistributions'];
    }

    /**
     * Sets aspectDistributions
     *
     * @param \macropage\SDKs\ebay\rest\browse\Model\AspectDistribution[]|null $aspectDistributions An array of containers for the all the aspect refinements.
     *
     * @return self
     */
    public function setAspectDistributions($aspectDistributions)
    {
        $this->container['aspectDistributions'] = $aspectDistributions;

        return $this;
    }

    /**
     * Gets buyingOptionDistributions
     *
     * @return \macropage\SDKs\ebay\rest\browse\Model\BuyingOptionDistribution[]|null
     */
    public function getBuyingOptionDistributions()
    {
        return $this->container['buyingOptionDistributions'];
    }

    /**
     * Sets buyingOptionDistributions
     *
     * @param \macropage\SDKs\ebay\rest\browse\Model\BuyingOptionDistribution[]|null $buyingOptionDistributions An array of containers for the all the buying option refinements.
     *
     * @return self
     */
    public function setBuyingOptionDistributions($buyingOptionDistributions)
    {
        $this->container['buyingOptionDistributions'] = $buyingOptionDistributions;

        return $this;
    }

    /**
     * Gets categoryDistributions
     *
     * @return \macropage\SDKs\ebay\rest\browse\Model\CategoryDistribution[]|null
     */
    public function getCategoryDistributions()
    {
        return $this->container['categoryDistributions'];
    }

    /**
     * Sets categoryDistributions
     *
     * @param \macropage\SDKs\ebay\rest\browse\Model\CategoryDistribution[]|null $categoryDistributions An array of containers for the all the category refinements.
     *
     * @return self
     */
    public function setCategoryDistributions($categoryDistributions)
    {
        $this->container['categoryDistributions'] = $categoryDistributions;

        return $this;
    }

    /**
     * Gets conditionDistributions
     *
     * @return \macropage\SDKs\ebay\rest\browse\Model\ConditionDistribution[]|null
     */
    public function getConditionDistributions()
    {
        return $this->container['conditionDistributions'];
    }

    /**
     * Sets conditionDistributions
     *
     * @param \macropage\SDKs\ebay\rest\browse\Model\ConditionDistribution[]|null $conditionDistributions An array of containers for the all the condition refinements.
     *
     * @return self
     */
    public function setConditionDistributions($conditionDistributions)
    {
        $this->container['conditionDistributions'] = $conditionDistributions;

        return $this;
    }

    /**
     * Gets dominantCategoryId
     *
     * @return string|null
     */
    public function getDominantCategoryId()
    {
        return $this->container['dominantCategoryId'];
    }

    /**
     * Sets dominantCategoryId
     *
     * @param string|null $dominantCategoryId The identifier of the category that most of the items are part of.
     *
     * @return self
     */
    public function setDominantCategoryId($dominantCategoryId)
    {
        $this->container['dominantCategoryId'] = $dominantCategoryId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


