<?php
/**
 * Taxes
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  macropage\SDKs\ebay\rest\browse
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Browse API
 *
 * <p>The Browse API has the following resources:</p>   <ul> <li><b> item_summary: </b> Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values.</li>  <li><b> search_by_image: </b><a href=\"https://developer.ebay.com/api-docs/static/versioning.html#experimental\" target=\"_blank\"><img src=\"/cms/img/docs/experimental-icon.svg\" class=\"legend-icon experimental-icon\" alt=\"Experimental Release\" title=\"Experimental Release\" />&nbsp;(Experimental)</a> Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters.</li>   <li><b> item: </b> <ul><li>Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part.</li> <li>Provides a bridge between the eBay legacy APIs, such as <b> Finding</b>, and the RESTful APIs, which use different formats for the item IDs.</li>  </ul> </li>  <li> <b> shopping_cart: </b> <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#experimental\" target=\"_blank\"><img src=\"/cms/img/docs/experimental-icon.svg\" class=\"legend-icon experimental-icon\" alt=\"Experimental Release\" title=\"Experimental Release\" />&nbsp;(Experimental)</a> <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited\" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp;<b> Note: </b> This resource is not available in the eBay API Explorer.</li></ul>       <p>The <b> item_summary</b>, <b> search_by_image</b>, and <b> item</b> resource calls require an <a href=\"/api-docs/static/oauth-client-credentials-grant.html\">Application access token</a>. The <b> shopping_cart</b> resource calls require a <a href=\"/api-docs/static/oauth-authorization-code-grant.html\">User access token</a>.</p>
 *
 * The version of the OpenAPI document: v1.11.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace macropage\SDKs\ebay\rest\browse\Model;

use \ArrayAccess;
use \macropage\SDKs\ebay\rest\browse\ObjectSerializer;

/**
 * Taxes Class Doc Comment
 *
 * @category Class
 * @description The type that defines the tax fields.
 * @package  macropage\SDKs\ebay\rest\browse
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Taxes implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Taxes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ebayCollectAndRemitTax' => 'bool',
        'includedInPrice' => 'bool',
        'shippingAndHandlingTaxed' => 'bool',
        'taxJurisdiction' => '\macropage\SDKs\ebay\rest\browse\Model\TaxJurisdiction',
        'taxPercentage' => 'string',
        'taxType' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'ebayCollectAndRemitTax' => null,
        'includedInPrice' => null,
        'shippingAndHandlingTaxed' => null,
        'taxJurisdiction' => null,
        'taxPercentage' => null,
        'taxType' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ebayCollectAndRemitTax' => 'ebayCollectAndRemitTax',
        'includedInPrice' => 'includedInPrice',
        'shippingAndHandlingTaxed' => 'shippingAndHandlingTaxed',
        'taxJurisdiction' => 'taxJurisdiction',
        'taxPercentage' => 'taxPercentage',
        'taxType' => 'taxType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ebayCollectAndRemitTax' => 'setEbayCollectAndRemitTax',
        'includedInPrice' => 'setIncludedInPrice',
        'shippingAndHandlingTaxed' => 'setShippingAndHandlingTaxed',
        'taxJurisdiction' => 'setTaxJurisdiction',
        'taxPercentage' => 'setTaxPercentage',
        'taxType' => 'setTaxType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ebayCollectAndRemitTax' => 'getEbayCollectAndRemitTax',
        'includedInPrice' => 'getIncludedInPrice',
        'shippingAndHandlingTaxed' => 'getShippingAndHandlingTaxed',
        'taxJurisdiction' => 'getTaxJurisdiction',
        'taxPercentage' => 'getTaxPercentage',
        'taxType' => 'getTaxType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ebayCollectAndRemitTax'] = $data['ebayCollectAndRemitTax'] ?? null;
        $this->container['includedInPrice'] = $data['includedInPrice'] ?? null;
        $this->container['shippingAndHandlingTaxed'] = $data['shippingAndHandlingTaxed'] ?? null;
        $this->container['taxJurisdiction'] = $data['taxJurisdiction'] ?? null;
        $this->container['taxPercentage'] = $data['taxPercentage'] ?? null;
        $this->container['taxType'] = $data['taxType'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ebayCollectAndRemitTax
     *
     * @return bool|null
     */
    public function getEbayCollectAndRemitTax()
    {
        return $this->container['ebayCollectAndRemitTax'];
    }

    /**
     * Sets ebayCollectAndRemitTax
     *
     * @param bool|null $ebayCollectAndRemitTax This field is only returned if <code>true</code>, and indicates that eBay will collect tax (sales tax, Goods and Services tax, or VAT) for at least one line item in the order, and remit the tax to the taxing authority of the buyer's residence.
     *
     * @return self
     */
    public function setEbayCollectAndRemitTax($ebayCollectAndRemitTax)
    {
        $this->container['ebayCollectAndRemitTax'] = $ebayCollectAndRemitTax;

        return $this;
    }

    /**
     * Gets includedInPrice
     *
     * @return bool|null
     */
    public function getIncludedInPrice()
    {
        return $this->container['includedInPrice'];
    }

    /**
     * Sets includedInPrice
     *
     * @param bool|null $includedInPrice This indicates if tax was applied for the cost of the item.
     *
     * @return self
     */
    public function setIncludedInPrice($includedInPrice)
    {
        $this->container['includedInPrice'] = $includedInPrice;

        return $this;
    }

    /**
     * Gets shippingAndHandlingTaxed
     *
     * @return bool|null
     */
    public function getShippingAndHandlingTaxed()
    {
        return $this->container['shippingAndHandlingTaxed'];
    }

    /**
     * Sets shippingAndHandlingTaxed
     *
     * @param bool|null $shippingAndHandlingTaxed This indicates if tax is applied for the shipping cost.
     *
     * @return self
     */
    public function setShippingAndHandlingTaxed($shippingAndHandlingTaxed)
    {
        $this->container['shippingAndHandlingTaxed'] = $shippingAndHandlingTaxed;

        return $this;
    }

    /**
     * Gets taxJurisdiction
     *
     * @return \macropage\SDKs\ebay\rest\browse\Model\TaxJurisdiction|null
     */
    public function getTaxJurisdiction()
    {
        return $this->container['taxJurisdiction'];
    }

    /**
     * Sets taxJurisdiction
     *
     * @param \macropage\SDKs\ebay\rest\browse\Model\TaxJurisdiction|null $taxJurisdiction taxJurisdiction
     *
     * @return self
     */
    public function setTaxJurisdiction($taxJurisdiction)
    {
        $this->container['taxJurisdiction'] = $taxJurisdiction;

        return $this;
    }

    /**
     * Gets taxPercentage
     *
     * @return string|null
     */
    public function getTaxPercentage()
    {
        return $this->container['taxPercentage'];
    }

    /**
     * Sets taxPercentage
     *
     * @param string|null $taxPercentage The percentage of tax.
     *
     * @return self
     */
    public function setTaxPercentage($taxPercentage)
    {
        $this->container['taxPercentage'] = $taxPercentage;

        return $this;
    }

    /**
     * Gets taxType
     *
     * @return string|null
     */
    public function getTaxType()
    {
        return $this->container['taxType'];
    }

    /**
     * Sets taxType
     *
     * @param string|null $taxType This field indicates the type of tax that may be collected for the item. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:TaxType'>eBay API documentation</a>
     *
     * @return self
     */
    public function setTaxType($taxType)
    {
        $this->container['taxType'] = $taxType;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


